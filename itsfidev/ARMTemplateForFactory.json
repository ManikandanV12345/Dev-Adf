{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "itsfidev"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase3'"
		},
		"testing_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'testing'"
		},
		"AzureKeyVault2_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://sqlkyvaults.vault.azure.net/"
		},
		"AzureSqlDatabase2_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().SecretName"
		},
		"DynamicKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{linkedService().VaultName}"
		},
		"itsfi_blob_ac_key01_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "blob"
		},
		"itsfi_dfs_ac_key01_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://itsfiadls.dfs.core.windows.net"
		},
		"itsfi_sqlmi_dataframework_key01_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "sqlsecret"
		},
		"trigger2_properties_ListeningCustomevents_parameters_param1": {
			"type": "string",
			"defaultValue": "@triggerBody().event.data._keyName_param1"
		},
		"trigger2_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7f43217e-5dd6-4b9b-8ba6-149b75296777/resourceGroups/itsfirsg/providers/Microsoft.EventGrid/topics/Mani"
		},
		"trigger3_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7f43217e-5dd6-4b9b-8ba6-149b75296777/resourceGroups/itsfirsg/providers/Microsoft.EventGrid/topics/Mani"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic call')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.Query",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DynamicDS",
								"type": "DatasetReference",
								"parameters": {
									"Vaultname": {
										"value": "@pipeline().parameters.Vaultname",
										"type": "Expression"
									},
									"SecretName": {
										"value": "@pipeline().parameters.Secretname",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Vaultname": {
						"type": "string"
					},
					"Secretname": {
						"type": "string"
					},
					"Query": {
						"type": "string"
					},
					"SourceName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DynamicDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicPip_Parent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from DATACHECK",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Dynamic call",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Vaultname": {
												"value": "@item().KeyvaultName",
												"type": "Expression"
											},
											"Secretname": {
												"value": "@item().SecretName",
												"type": "Expression"
											},
											"Query": {
												"value": "@item().Query",
												"type": "Expression"
											},
											"SourceName": {
												"value": "@item().SourceName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]",
				"[concat(variables('factoryId'), '/pipelines/Dynamic call')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ListeningCustomevents')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://manikandan.eastus-1.eventgrid.azure.net/api/events",
							"method": "POST",
							"headers": {},
							"body": [
								{
									"id": "@{pipeline().RunId}",
									"eventType": "PipelineFinished",
									"subject": "myapp/pipelines/mydataset",
									"eventTime": "@{formatDateTime(utcnow(), 's')}",
									"data": {
										"DataFactory": "@{pipeline().DataFactory}",
										"PipelineName": "@{pipeline().Pipeline}",
										"PipelineGroupId": "@{pipeline().GroupId}",
										"PipelineTriggerId": "@{pipeline().GroupId}",
										"PipelineTriggerName": "@{pipeline().TriggerName}",
										"PipelineTriggerType": "@{pipeline().TriggerType}",
										"PipelineTriggeredByPipelineName": "@{pipeline()?.TriggeredByPipelineName}",
										"PipelineTriggeredByPipelineRunId": "@{pipeline()?.TriggeredByPipelineRunId}"
									},
									"dataVersion": "1.0"
								}
							],
							"authentication": {
								"type": "MSI",
								"resource": "https://eventgrid.azure.net/"
							}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "set",
							"value": {
								"value": "@pipeline().parameters.param1",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"param1": {
						"type": "string"
					}
				},
				"variables": {
					"set": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoggingPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase3",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('EXEC SP_LOGGING','''',pipeline().parameters.PipelineId,'''',\n',','''',pipeline().parameters.Json,'''')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PipelineId": {
						"type": "string"
					},
					"Json": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendingtoCustomevent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://mani.eastus-1.eventgrid.azure.net/api/events",
							"method": "POST",
							"headers": {},
							"body": [
								{
									"id": "@{pipeline().RunId}",
									"eventType": "copyCompleted",
									"subject": "factoriess",
									"eventTime": "@{formatDateTime(utcnow(), 's')}",
									"data": {
										"DataFactory": "@{pipeline().DataFactory}",
										"PipelineName": "@{pipeline().Pipeline}",
										"PipelineGroupId": "@{pipeline().GroupId}",
										"PipelineTriggerId": "@{pipeline().GroupId}",
										"PipelineTriggerName": "@{pipeline().TriggerName}",
										"param1": "@{pipeline().TriggerType}",
										"PipelineTriggerType": "@{pipeline().TriggerType}",
										"PipelineTriggeredByPipelineName": "@{pipeline()?.TriggeredByPipelineName}",
										"PipelineTriggeredByPipelineRunId": "@{pipeline()?.TriggeredByPipelineRunId}"
									},
									"dataVersion": "1.0"
								}
							],
							"authentication": {
								"type": "MSI",
								"resource": "https://eventgrid.azure.net/"
							}
						}
					},
					{
						"name": "Web1_copy1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://mani.eastus-1.eventgrid.azure.net/api/events",
							"method": "POST",
							"headers": {},
							"body": [
								{
									"id": "@{pipeline().RunId}",
									"eventType": "dyna",
									"subject": "factories",
									"eventTime": "@{formatDateTime(utcnow(), 's')}",
									"data": {
										"DataFactory": "@{pipeline().DataFactory}",
										"PipelineName": "@{pipeline().Pipeline}",
										"PipelineGroupId": "@{pipeline().GroupId}",
										"PipelineTriggerId": "@{pipeline().GroupId}",
										"PipelineTriggerName": "@{pipeline().TriggerName}",
										"PipelineTriggerType": "@{pipeline().TriggerType}",
										"PipelineTriggeredByPipelineName": "@{pipeline()?.TriggeredByPipelineName}",
										"PipelineTriggeredByPipelineRunId": "@{pipeline()?.TriggeredByPipelineRunId}"
									},
									"dataVersion": "1.0"
								}
							],
							"authentication": {
								"type": "MSI",
								"resource": "https://eventgrid.azure.net/"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"set": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sequence')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "ActivityName",
								"value": "Lookup1"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from SEQUENCEMASTER",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set variable3",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set variable2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@AND(equals(variables('superiror'),'NONE'),not(equals(variables('current'),'NONE')))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Web_copy1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Web",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"SubscriptionId": {
															"value": "@pipeline().globalParameters.Subscriptionid",
															"type": "Expression"
														},
														"ResourceGrp": {
															"value": "@pipeline().globalParameters.ResourceGrp",
															"type": "Expression"
														},
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@variables('current')",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Web",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Web",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"SubscriptionId": {
															"value": "@pipeline().globalParameters.Subscriptionid",
															"type": "Expression"
														},
														"ResourceGrp": {
															"value": "@pipeline().globalParameters.ResourceGrp",
															"type": "Expression"
														},
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@variables('current')",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Set variable4",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Web",
														"dependencyConditions": [
															"Succeeded",
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "runid",
													"value": {
														"value": "@activity('Web').output.pipelineRunId",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Execute Pipeline1_copy1",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Web",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "LoggingPipeline",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"PipelineId": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"Json": {
															"value": "@activity('Web').output",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "current",
										"value": {
											"value": "@item().CURRENT",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "superiror",
										"value": {
											"value": "@item().SUPERIOR",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable3",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "next",
										"value": {
											"value": "@item().NEXT",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LoggingPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"Json": {
									"value": "@activity('Lookup1').output.value",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"current": {
						"type": "String"
					},
					"superiror": {
						"type": "String"
					},
					"next": {
						"type": "String"
					},
					"runid": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]",
				"[concat(variables('factoryId'), '/pipelines/LoggingPipeline')]",
				"[concat(variables('factoryId'), '/pipelines/Web')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wait')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select [key],value  from keyvalue",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable4",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Web1",
						"description": "",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://management.azure.com/subscriptions/',\n'7f43217e-5dd6-4b9b-8ba6-149b75296777','/resourceGroups/',\n'itsfirsg','/providers/Microsoft.DataFactory/factories/',\npipeline().DataFactory,'/pipelines/',\n'pipeline2','/createRun?api-version=2018-06-01')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(activity('Lookup1').output.value[0].value)",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.core.windows.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"param": {
						"type": "int",
						"defaultValue": 2
					}
				},
				"variables": {
					"var": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wait1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wait2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait2",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Web')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"description": "",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://management.azure.com/subscriptions/',pipeline().parameters.SubscriptionId,'/resourceGroups/',pipeline().parameters.ResourceGrp,'/providers/Microsoft.DataFactory/factories/',pipeline().parameters.DataFactoryName,'/pipelines/',pipeline().parameters.PipelineName,'/createRun?api-version=2018-06-01')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@pipeline().parameters.body",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.core.windows.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SubscriptionId": {
						"type": "string"
					},
					"ResourceGrp": {
						"type": "string"
					},
					"DataFactoryName": {
						"type": "string"
					},
					"PipelineName": {
						"type": "string"
					},
					"body": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web2",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.loganalytics.io/v1/workspaces/762a5982-5ada-4e1a-b282-617151d2a2f7/query?query=AzureDiagnostics | extend PackedRecord = pack_all() | summarize Result = make_list(PackedRecord)",
							"method": "GET",
							"headers": {
								"content-type": "application/json; charset=utf-8"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://api.loganalytics.io"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Web2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[test]",
								"storedProcedureParameters": {
									"logs": {
										"type": "String",
										"value": {
											"value": "@string(activity('Web2').output.tables[0].rows[0])",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var": {
						"type": "Array"
					},
					"json": {
						"type": "String"
					},
					"va2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "mani_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://api.loganalytics.io/v1/workspaces/762a5982-5ada-4e1a-b282-617151d2a2f7/query?query=ADFActivityRun | where PipelineRunId ==''',pipeline().RunId,''' | extend PackedRecord = pack_all() | summarize Result = make_list(PackedRecord)')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {
								"content-type": "application/json; charset=utf-8"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://api.loganalytics.io"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Web2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[test]",
								"storedProcedureParameters": {
									"logs": {
										"type": "String",
										"value": {
											"value": "@string(activity('Web2').output.tables[0].rows[0])",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "mani",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 60
						}
					},
					{
						"name": "mani_copy1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "mani",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 12
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var": {
						"type": "Array"
					},
					"json": {
						"type": "String"
					},
					"va2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.params",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"params": {
						"type": "object"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "itsfi_sqlmi_dataframework_key01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TenantId",
						"type": "nvarchar"
					},
					{
						"name": "SourceSystem",
						"type": "nvarchar"
					},
					{
						"name": "TimeGenerated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ResourceId",
						"type": "nvarchar"
					},
					{
						"name": "OperationName",
						"type": "nvarchar"
					},
					{
						"name": "Category",
						"type": "nvarchar"
					},
					{
						"name": "CorrelationId",
						"type": "nvarchar"
					},
					{
						"name": "Level",
						"type": "nvarchar"
					},
					{
						"name": "Location",
						"type": "nvarchar"
					},
					{
						"name": "Tags",
						"type": "nvarchar"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					},
					{
						"name": "UserProperties",
						"type": "nvarchar"
					},
					{
						"name": "Input",
						"type": "nvarchar"
					},
					{
						"name": "Output",
						"type": "varchar"
					},
					{
						"name": "ErrorCode",
						"type": "varchar"
					},
					{
						"name": "ErrorMessage",
						"type": "varchar"
					},
					{
						"name": "Annotations",
						"type": "varchar"
					},
					{
						"name": "EventMessage",
						"type": "varchar"
					},
					{
						"name": "Start",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TriggerId",
						"type": "varchar"
					},
					{
						"name": "TriggerName",
						"type": "varchar"
					},
					{
						"name": "TriggerType",
						"type": "varchar"
					},
					{
						"name": "TriggerEvent",
						"type": "varchar"
					},
					{
						"name": "TriggerFailureType",
						"type": "varchar"
					},
					{
						"name": "Parameters",
						"type": "varchar"
					},
					{
						"name": "SystemParametersType",
						"type": "varchar"
					},
					{
						"name": "_ResourceId",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "LoadControl",
					"table": "CuratedZone_Log"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/itsfi_sqlmi_dataframework_key01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Logs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "testing",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/testing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference",
					"parameters": {
						"VaultName": {
							"value": "@dataset().Vaultname",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Vaultname": {
						"type": "String"
					},
					"SecretName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"keyvault": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault2_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"VaultName": {
						"type": "String"
					},
					"SecretName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "DynamicKV",
							"type": "LinkedServiceReference",
							"parameters": {
								"VaultName": {
									"value": "@linkedService().VaultName",
									"type": "Expression"
								}
							}
						},
						"secretName": {
							"value": "[parameters('AzureSqlDatabase2_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase3_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"VaultName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('DynamicKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/itsfi_blob_ac_key01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault2",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('itsfi_blob_ac_key01_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/itsfi_dfs_ac_key01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('itsfi_dfs_ac_key01_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault2",
							"type": "LinkedServiceReference"
						},
						"secretName": "adls1"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/itsfi_sqlmi_dataframework_key01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault2",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('itsfi_sqlmi_dataframework_key01_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/testing')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('testing_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pipeline1",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 30,
					"startTime": "2022-09-15T07:36:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger2')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ListeningCustomevents",
							"type": "PipelineReference"
						},
						"parameters": {
							"param1": "[parameters('trigger2_properties_ListeningCustomevents_parameters_param1')]"
						}
					}
				],
				"type": "CustomEventsTrigger",
				"typeProperties": {
					"subjectEndsWith": "",
					"subjectBeginsWith": "factories",
					"scope": "[parameters('trigger2_properties_typeProperties_scope')]",
					"events": [
						"copyCompleted"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ListeningCustomevents')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger3')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "DynamicPip_Parent",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "CustomEventsTrigger",
				"typeProperties": {
					"subjectEndsWith": "",
					"subjectBeginsWith": "factories",
					"scope": "[parameters('trigger3_properties_typeProperties_scope')]",
					"events": [
						"dyna"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DynamicPip_Parent')]"
			]
		}
	]
}